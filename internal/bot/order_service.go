package bot

import (
	"astro-sarafan/internal/database"
	"astro-sarafan/internal/models"
	"astro-sarafan/internal/utils"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"math/rand"
	"strings"
	"time"

	"go.uber.org/zap"
)

// NewOrderService - —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –∑–∞–∫–∞–∑–æ–≤
func NewOrderService(telegram TelegramClient, logger *zap.Logger, channelID string, orderRepo *database.OrderRepository, userRepo *database.UserRepository) *OrderService {
	return &OrderService{
		telegram:      telegram,
		logger:        logger,
		channelID:     channelID,
		orderRepo:     orderRepo,
		userRepo:      userRepo,
		orderMessages: make(map[string]string),
	}
}

func (s *OrderService) CreateOrder(clientID int64, clientName, clientUser string, referrerID int64, referrerName string) (string, error) {
	// –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ
	s.logger.Info("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞",
		zap.Int64("client_id", clientID),
		zap.String("client_name", clientName),
		zap.String("client_user", clientUser),
		zap.Int64("referrer_id", referrerID),
		zap.String("referrer_name", referrerName),
	)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é)
	user := models.User{
		ChatID:   clientID,
		Username: clientUser,
		FullName: clientName,
	}

	err := s.userRepo.CreateUser(user)
	if err != nil {
		s.logger.Error("–æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
			zap.Error(err),
			zap.Int64("client_id", clientID),
		)
		return "", err
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–∫–∞–∑–∞
	orderID := generateOrderID()

	// –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ—Ñ–µ—Ä–µ—Ä–µ
	order := models.Order{
		ID:           orderID,
		ClientID:     clientID,
		Status:       models.OrderStatusNew,
		CreatedAt:    time.Now(),
		ReferrerID:   referrerID,
		ReferrerName: referrerName,
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
	err = s.orderRepo.CreateOrder(order)
	if err != nil {
		s.logger.Error("–æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞",
			zap.Error(err),
			zap.String("order_id", orderID),
		)
		return "", err
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ –∫–∞–Ω–∞–ª
	orderWithClient := models.Order{
		ID:           orderID,
		ClientID:     clientID,
		ClientName:   clientName,
		ClientUser:   clientUser,
		Status:       models.OrderStatusNew,
		CreatedAt:    time.Now(),
		ReferrerID:   referrerID,
		ReferrerName: referrerName,
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –∞—Å—Ç—Ä–æ–ª–æ–≥–æ–≤
	messageID, err := s.telegram.SendOrderToAstrologers(s.channelID, orderWithClient)
	if err != nil {
		s.logger.Error("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞ –≤ –∫–∞–Ω–∞–ª –∞—Å—Ç—Ä–æ–ª–æ–≥–æ–≤",
			zap.Error(err),
			zap.String("order_id", orderID),
		)
		return orderID, err
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	s.orderMessages[orderID] = messageID

	s.logger.Info("—Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑",
		zap.String("order_id", orderID),
		zap.Int64("client_id", clientID),
		zap.String("message_id", messageID),
		zap.Int64("referrer_id", referrerID),
	)

	return orderID, nil
}

func (s *OrderService) TakeOrder(orderID string, astrologerID int64, astrologerName string) error {
	// –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
	order, err := s.orderRepo.GetOrderByID(orderID)
	if err != nil {
		s.logger.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞",
			zap.Error(err),
			zap.String("order_id", orderID),
		)
		return err
	}

	// –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
	clientName := order.ClientName
	if clientName == "" {
		clientName = "Unnamed User"
	}
	clientUser := order.ClientUser
	if clientUser == "" {
		clientUser = "unnamed_user"
	}
	astrologerNameSafe := utils.EscapeMarkdownV2(astrologerName)
	clientNameSafe := clientName
	clientUserSafe := utils.EscapeMarkdownV2(clientUser)

	// –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
	s.logger.Info("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º",
		zap.String("order_id", orderID),
		zap.String("current_status", string(order.Status)),
		zap.Int64("client_id", order.ClientID),
	)

	if order.ID == "" {
		return fmt.Errorf("–∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω: %s", orderID)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ –∑–∞–∫–∞–∑ —Ç–µ–∫—É—â–∏–º –∞—Å—Ç—Ä–æ–ª–æ–≥–æ–º
	if order.Status == models.OrderStatusInWork && order.AstrologerID == astrologerID {
		s.logger.Info("–ó–∞–∫–∞–∑ —É–∂–µ –≤–∑—è—Ç —Ç–µ–∫—É—â–∏–º –∞—Å—Ç—Ä–æ–ª–æ–≥–æ–º",
			zap.String("order_id", orderID),
			zap.Int64("astrologer_id", astrologerID),
		)
		// –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–æ–≤
		messageID, exists := s.orderMessages[orderID]
		if exists {
			// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–æ–≤
			text := fmt.Sprintf(
				"üåü *–ó–ê–ö–ê–ó –í –†–ê–ë–û–¢–ï* üåü\n\n"+
					"*ID –∑–∞–∫–∞–∑–∞:* `%s`\n"+
					"*–ö–ª–∏–µ–Ω—Ç:* %s\n"+
					"*Username:* @%s\n"+
					"*–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞:* %s\n\n"+
					"*–í–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É:* %s\n"+
					"*–ê—Å—Ç—Ä–æ–ª–æ–≥:* %s",
				orderID,
				clientNameSafe,
				clientUserSafe,
				order.CreatedAt.Format("02.01.2006 15:04"),
				order.TakenAt.Format("02.01.2006 15:04"),
				astrologerNameSafe,
			)

			// –ü—É—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏
			keyboard := tgbotapi.InlineKeyboardMarkup{
				InlineKeyboard: [][]tgbotapi.InlineKeyboardButton{},
			}

			err = s.telegram.UpdateOrderMessage(s.channelID, messageID, text, keyboard)
			if err != nil {
				s.logger.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ",
					zap.Error(err),
					zap.String("order_id", orderID),
				)
			}
		}

		return nil
	}

	// –ï—Å–ª–∏ –∑–∞–∫–∞–∑ —É–∂–µ –Ω–µ –≤ —Å—Ç–∞—Ç—É—Å–µ new, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
	if order.Status != models.OrderStatusNew {
		s.logger.Warn("–ü–æ–ø—ã—Ç–∫–∞ –≤–∑—è—Ç—å –∑–∞–∫–∞–∑, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –Ω–µ –≤ —Å—Ç–∞—Ç—É—Å–µ 'new'",
			zap.String("order_id", orderID),
			zap.String("current_status", string(order.Status)),
		)
		return fmt.Errorf("–∑–∞–∫–∞–∑ —É–∂–µ –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω: %s", orderID)
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
	err = s.orderRepo.UpdateOrderStatus(orderID, models.OrderStatusInWork, astrologerID, astrologerName)
	if err != nil {
		s.logger.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞",
			zap.Error(err),
			zap.String("order_id", orderID),
		)
		return err
	}

	// –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
	updatedOrder, err := s.orderRepo.GetOrderByID(orderID)
	if err != nil {
		s.logger.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞",
			zap.Error(err),
			zap.String("order_id", orderID),
		)
		return err
	}

	// –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–º –∑–∞–∫–∞–∑–µ
	s.logger.Info("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–º –∑–∞–∫–∞–∑–µ",
		zap.String("order_id", updatedOrder.ID),
		zap.String("new_status", string(updatedOrder.Status)),
		zap.Int64("client_id", updatedOrder.ClientID),
	)

	// –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–æ–≤
	messageID, exists := s.orderMessages[orderID]
	if exists {
		// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–æ–≤
		text := fmt.Sprintf(
			"üåü *–ó–ê–ö–ê–ó –í –†–ê–ë–û–¢–ï* üåü\n\n"+
				"*ID –∑–∞–∫–∞–∑–∞:* `%s`\n"+
				"*–ö–ª–∏–µ–Ω—Ç:* %s\n"+
				"*Username:* @%s\n"+
				"*–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞:* %s\n\n"+
				"*–í–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É:* %s\n"+
				"*–ê—Å—Ç—Ä–æ–ª–æ–≥:* %s",
			updatedOrder.ID,
			clientNameSafe,
			clientUserSafe,
			updatedOrder.CreatedAt.Format("02.01.2006 15:04"),
			updatedOrder.TakenAt.Format("02.01.2006 15:04"),
			astrologerNameSafe,
		)

		// –ü—É—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏
		keyboard := tgbotapi.InlineKeyboardMarkup{
			InlineKeyboard: [][]tgbotapi.InlineKeyboardButton{},
		}

		err = s.telegram.UpdateOrderMessage(s.channelID, messageID, text, keyboard)
		if err != nil {
			s.logger.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ",
				zap.Error(err),
				zap.String("order_id", orderID),
			)
		}
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ —Ç–æ–º, —á—Ç–æ –µ–≥–æ –∑–∞–ø—Ä–æ—Å –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É
	err = s.telegram.SendMessage(updatedOrder.ClientID, fmt.Sprintf(
		"‚ú® –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É! –ê—Å—Ç—Ä–æ–ª–æ–≥ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.",
	))
	if err != nil {
		s.logger.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É",
			zap.Error(err),
			zap.Int64("client_id", updatedOrder.ClientID),
		)
	}

	s.logger.Info("–ó–∞–∫–∞–∑ –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É",
		zap.String("order_id", orderID),
		zap.Int64("astrologer_id", astrologerID),
	)

	return nil
}

func (s *OrderService) CheckConsultationTimeouts() {
	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
	activeOrders, err := s.orderRepo.GetActiveOrdersOver24Hours()
	if err != nil {
		s.logger.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤", zap.Error(err))
		return
	}

	for _, order := range activeOrders {
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
		err := s.sendConsultationReminderMessage(order)
		if err == nil {
			// –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞
			s.orderRepo.MarkReminderSent(order.ID)
		}
	}
}

func (s *OrderService) sendConsultationReminderMessage(order models.Order) error {
	message := "‚≠ê –•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ? ‚≠ê –¢–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è —Å–∫–∏–¥–∫–∞ –Ω–∞ –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã!"

	// –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏
	buttons := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", "consultation_continue"),
		),
	)

	err := s.telegram.SendMessageWithInlineKeyboard(order.ClientID, message, buttons)
	if err != nil {
		s.logger.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", zap.Error(err))
		return err
	}

	return nil
}

// generateOrderID - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–∫–∞–∑–∞
func generateOrderID() string {
	const charset = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
	const idLength = 8

	result := strings.Builder{}
	for i := 0; i < idLength; i++ {
		result.WriteByte(charset[rand.Intn(len(charset))])
	}

	return result.String()
}
