package bot

import (
	"astro-sarafan/internal/models"
	"fmt"
	"math/rand"
	"strings"
	"sync"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"go.uber.org/zap"
)

// NewOrderService - —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –∑–∞–∫–∞–∑–æ–≤
func NewOrderService(telegram TelegramClient, logger *zap.Logger, channelID string) *OrderService {
	return &OrderService{
		orders:        make(map[string]models.Order),
		orderMessages: make(map[string]string),
		telegram:      telegram,
		logger:        logger,
		channelID:     channelID,
	}
}

// Mutex –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º –∑–∞–∫–∞–∑–æ–≤
var orderMutex sync.RWMutex

// CreateOrder - —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
func (s *OrderService) CreateOrder(clientID int64, clientName, clientUser string) (string, error) {
	orderMutex.Lock()
	defer orderMutex.Unlock()

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–∫–∞–∑–∞
	orderID := generateOrderID()

	// –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
	order := models.Order{
		ID:         orderID,
		ClientID:   clientID,
		ClientName: clientName,
		ClientUser: clientUser,
		Status:     models.OrderStatusNew,
		CreatedAt:  time.Now(),
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
	s.orders[orderID] = order

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –∞—Å—Ç—Ä–æ–ª–æ–≥–æ–≤
	messageID, err := s.telegram.SendOrderToAstrologers(s.channelID, order)
	if err != nil {
		s.logger.Error("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞ –≤ –∫–∞–Ω–∞–ª –∞—Å—Ç—Ä–æ–ª–æ–≥–æ–≤",
			zap.Error(err),
			zap.String("order_id", orderID),
		)
		return orderID, err
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	s.orderMessages[orderID] = messageID

	s.logger.Info("—Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑",
		zap.String("order_id", orderID),
		zap.Int64("client_id", clientID),
		zap.String("message_id", messageID),
	)

	return orderID, nil
}

// TakeOrder - –≤–∑—è—Ç–∏–µ –∑–∞–∫–∞–∑–∞ –≤ —Ä–∞–±–æ—Ç—É –∞—Å—Ç—Ä–æ–ª–æ–≥–æ–º
func (s *OrderService) TakeOrder(orderID string, astrologerID int64, astrologerName string) error {
	orderMutex.Lock()
	defer orderMutex.Unlock()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–∫–∞–∑
	order, exists := s.orders[orderID]
	if !exists {
		return fmt.Errorf("–∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω: %s", orderID)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–∑—è—Ç –ª–∏ –∑–∞–∫–∞–∑ —É–∂–µ –≤ —Ä–∞–±–æ—Ç—É
	if order.Status != models.OrderStatusNew {
		return fmt.Errorf("–∑–∞–∫–∞–∑ —É–∂–µ –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω: %s", orderID)
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
	now := time.Now()
	order.Status = models.OrderStatusInWork
	order.AstrologerID = astrologerID
	order.TakenAt = &now

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
	s.orders[orderID] = order

	// –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–æ–≤
	messageID, exists := s.orderMessages[orderID]
	if !exists {
		s.logger.Error("–Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞",
			zap.String("order_id", orderID),
		)
		return fmt.Errorf("–Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞: %s", orderID)
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–æ–≤
	text := fmt.Sprintf(
		"üåü *–ó–ê–ö–ê–ó –í–ó–Ø–¢ –í –†–ê–ë–û–¢–£* üåü\n\n"+
			"*ID –∑–∞–∫–∞–∑–∞:* `%s`\n"+
			"*–ö–ª–∏–µ–Ω—Ç:* %s\n"+
			"*Username:* @%s\n"+
			"*–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞:* %s\n\n"+
			"*–í–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É:* %s\n"+
			"*–ê—Å—Ç—Ä–æ–ª–æ–≥:* %s",
		order.ID,
		order.ClientName,
		order.ClientUser,
		order.CreatedAt.Format("02.01.2006 15:04"),
		now.Format("02.01.2006 15:04"),
		astrologerName,
	)

	keyboard := tgbotapi.InlineKeyboardMarkup{
		InlineKeyboard: [][]tgbotapi.InlineKeyboardButton{},
	}

	err := s.telegram.UpdateOrderMessage(s.channelID, messageID, text, keyboard)
	if err != nil {
		s.logger.Error("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ",
			zap.Error(err),
			zap.String("order_id", orderID),
		)
		return err
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ —Ç–æ–º, —á—Ç–æ –µ–≥–æ –∑–∞–ø—Ä–æ—Å –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É
	err = s.telegram.SendMessage(order.ClientID, fmt.Sprintf(
		"‚ú® –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É! –ê—Å—Ç—Ä–æ–ª–æ–≥ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.",
	))
	if err != nil {
		s.logger.Error("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É",
			zap.Error(err),
			zap.Int64("client_id", order.ClientID),
		)
	}

	s.logger.Info("–∑–∞–∫–∞–∑ –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É",
		zap.String("order_id", orderID),
		zap.Int64("astrologer_id", astrologerID),
	)

	return nil
}

// GetOrder - –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ ID
func (s *OrderService) GetOrder(orderID string) (models.Order, bool) {
	orderMutex.RLock()
	defer orderMutex.RUnlock()

	order, exists := s.orders[orderID]
	return order, exists
}

// generateOrderID - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–∫–∞–∑–∞
func generateOrderID() string {
	const charset = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
	const idLength = 8

	result := strings.Builder{}
	for i := 0; i < idLength; i++ {
		result.WriteByte(charset[rand.Intn(len(charset))])
	}

	return result.String()
}
