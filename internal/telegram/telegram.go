package telegram

import (
	"astro-sarafan/internal/models"
	"astro-sarafan/internal/utils"
	"fmt"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"go.uber.org/zap"
)

// TelegramClient —Ä–µ–∞–ª–∏–∑—É–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å Telegram API
type TelegramClient struct {
	bot    *tgbotapi.BotAPI
	logger *zap.Logger
}

// NewTelegramClient —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞ Telegram
func NewTelegramClient(token string) *TelegramClient {
	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ª–æ–≥–≥–µ—Ä, —Ç–∞–∫ –∫–∞–∫ –Ω–∞—à –ª–æ–≥–≥–µ—Ä –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
		// –≠—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ –∑–¥–µ—Å—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—Å–µ —Ä–∞–≤–Ω–æ –Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è
		return &TelegramClient{bot: nil}
	}

	return &TelegramClient{
		bot: bot,
	}
}

// SetLogger —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ª–æ–≥–≥–µ—Ä –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
func (t *TelegramClient) SetLogger(logger *zap.Logger) {
	t.logger = logger
}

// SendMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
func (t *TelegramClient) SendMessage(chatID int64, text string) error {
	msg := tgbotapi.NewMessage(chatID, text)
	_, err := t.bot.Send(msg)
	if err != nil && t.logger != nil {
		t.logger.Error("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è",
			zap.Int64("chat_id", chatID),
			zap.Error(err),
		)
	}
	return err
}

// SendMarkdownMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π Markdown
func (t *TelegramClient) SendMarkdownMessage(chatID int64, text string) error {
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"
	msg.DisableWebPagePreview = false // –≤–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä URL, —á—Ç–æ–±—ã —Å—Å—ã–ª–∫–∏ —Ä–∞–±–æ—Ç–∞–ª–∏

	_, err := t.bot.Send(msg)
	if err != nil && t.logger != nil {
		t.logger.Error("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ markdown —Å–æ–æ–±—â–µ–Ω–∏—è",
			zap.Int64("chat_id", chatID),
			zap.Error(err),
		)
	}
	return err
}

// SendMessageWithKeyboard –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
func (t *TelegramClient) SendMessageWithKeyboard(chatID int64, text string, keyboard tgbotapi.ReplyKeyboardMarkup) error {
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = keyboard
	_, err := t.bot.Send(msg)
	if err != nil && t.logger != nil {
		t.logger.Error("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π",
			zap.Int64("chat_id", chatID),
			zap.Error(err),
		)
	}
	return err
}

// SendMessageWithInlineKeyboard –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
func (t *TelegramClient) SendMessageWithInlineKeyboard(chatID int64, text string, keyboard tgbotapi.InlineKeyboardMarkup) error {
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = keyboard
	_, err := t.bot.Send(msg)
	if err != nil && t.logger != nil {
		t.logger.Error("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π",
			zap.Int64("chat_id", chatID),
			zap.Error(err),
		)
	}
	return err
}

// SendOrderToAstrologers –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–∫–∞–∑ –≤ –∫–∞–Ω–∞–ª –∞—Å—Ç—Ä–æ–ª–æ–≥–æ–≤
func (t *TelegramClient) SendOrderToAstrologers(channelID string, order models.Order) (string, error) {
	// –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–ª–∏–µ–Ω—Ç–∞
	clientUser := order.ClientUser
	if clientUser == "" {
		clientUser = "unnamed_user"
	}
	clientName := order.ClientName
	if clientName == "" {
		clientName = "Unnamed User"
	}

	// –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞—Å—Ç—Ä–æ–ª–æ–≥–æ–≤
	textBuilder := strings.Builder{}
	textBuilder.WriteString("üåü *–ù–û–í–´–ô –ó–ê–ö–ê–ó –ù–ê –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Æ* üåü\n\n")
	textBuilder.WriteString(fmt.Sprintf("*ID –∑–∞–∫–∞–∑–∞:* `%s`\n", order.ID))
	textBuilder.WriteString(fmt.Sprintf("*–ö–ª–∏–µ–Ω—Ç:* %s\n", utils.EscapeMarkdownV2(clientName)))
	textBuilder.WriteString(fmt.Sprintf("*Username:* @%s\n", utils.EscapeMarkdownV2(clientUser)))
	textBuilder.WriteString(fmt.Sprintf("*–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞:* %s\n", order.CreatedAt.Format("02.01.2006 15:04")))

	// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–µ—Ä–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
	if order.ReferrerID != 0 {
		textBuilder.WriteString(fmt.Sprintf("\n*–ü—Ä–∏–≥–ª–∞—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:* %s\n",
			utils.EscapeMarkdownV2(order.ReferrerName)))
	}

	textBuilder.WriteString("\n*–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–∑—è—Ç—å –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—Ç—É.*")

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É"
	takeOrderButton := tgbotapi.NewInlineKeyboardButtonData("üîÆ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", "take_order:"+order.ID)
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(takeOrderButton),
	)

	// –ï—Å–ª–∏ channelID –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç "-100" –≤ –Ω–∞—á–∞–ª–µ, –¥–æ–±–∞–≤–∏–º
	if !strings.HasPrefix(channelID, "-100") {
		channelID = "-100" + channelID
	}

	chatID, err := strconv.ParseInt(channelID, 10, 64)
	if err != nil {
		if t.logger != nil {
			t.logger.Error("–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞",
				zap.String("channel_id", channelID),
				zap.Error(err),
			)
		}
		return "", fmt.Errorf("–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞: %v", err)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	msg := tgbotapi.NewMessage(chatID, textBuilder.String())
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ ID
	sentMsg, err := t.bot.Send(msg)
	if err != nil {
		if t.logger != nil {
			t.logger.Error("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –∞—Å—Ç—Ä–æ–ª–æ–≥–∞–º",
				zap.String("channel_id", channelID),
				zap.String("order_id", order.ID),
				zap.Error(err),
			)
		}
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∞–º: %v", err)
	}

	return strconv.Itoa(sentMsg.MessageID), nil
}

// UpdateOrderMessage –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ
func (t *TelegramClient) UpdateOrderMessage(channelID string, messageID string, text string, keyboard tgbotapi.InlineKeyboardMarkup) error {
	// –ï—Å–ª–∏ channelID –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç "-100" –≤ –Ω–∞—á–∞–ª–µ, –¥–æ–±–∞–≤–∏–º
	if !strings.HasPrefix(channelID, "-100") {
		channelID = "-100" + channelID
	}

	chatID, err := strconv.ParseInt(channelID, 10, 64)
	if err != nil {
		if t.logger != nil {
			t.logger.Error("–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è",
				zap.String("channel_id", channelID),
				zap.Error(err),
			)
		}
		return fmt.Errorf("–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞: %v", err)
	}

	msgID, err := strconv.Atoi(messageID)
	if err != nil {
		if t.logger != nil {
			t.logger.Error("–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞",
				zap.String("message_id", messageID),
				zap.Error(err),
			)
		}
		return fmt.Errorf("–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
	editMsg := tgbotapi.NewEditMessageText(chatID, msgID, text)
	editMsg.ParseMode = "Markdown"

	// –ï—Å–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—É—Å—Ç–∞—è, —É–¥–∞–ª—è–µ–º –µ–µ
	if len(keyboard.InlineKeyboard) == 0 {
		editMsg.ReplyMarkup = nil
	} else {
		editMsg.ReplyMarkup = &keyboard
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
	_, err = t.bot.Send(editMsg)
	if err != nil && t.logger != nil {
		t.logger.Error("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞",
			zap.String("channel_id", channelID),
			zap.String("message_id", messageID),
			zap.Error(err),
		)
	}

	return err
}

// StartBot –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram API
func (t *TelegramClient) StartBot() (chan models.User, chan models.CallbackQuery, error) {
	// –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º Long Polling
	_, err := t.bot.Request(tgbotapi.DeleteWebhookConfig{})
	if err != nil {
		if t.logger != nil {
			t.logger.Error("–æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞", zap.Error(err))
		}
		return nil, nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞: %v", err)
	}

	// –ü–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	time.Sleep(1 * time.Second)

	// –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª—ã –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
	userMessages := make(chan models.User)
	callbackQueries := make(chan models.CallbackQuery)

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	// –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
	updates := t.bot.GetUpdatesChan(u)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
	go func() {
		for update := range updates {
			// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
			if update.Message != nil {
				// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
				username := update.Message.From.UserName
				fullName := update.Message.From.FirstName
				if update.Message.From.LastName != "" {
					fullName += " " + update.Message.From.LastName
				}

				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
				userMessages <- models.User{
					ChatID:   update.Message.Chat.ID,
					Text:     update.Message.Text,
					Username: username,
					FullName: fullName,
				}

				if t.logger != nil {
					t.logger.Debug("–ø–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ",
						zap.Int64("chat_id", update.Message.Chat.ID),
						zap.String("text", update.Message.Text),
						zap.String("username", username),
					)
				}
			}

			// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏)
			if update.CallbackQuery != nil {
				userName := update.CallbackQuery.From.FirstName
				if update.CallbackQuery.From.LastName != "" {
					userName += " " + update.CallbackQuery.From.LastName
				}

				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º callback-–∑–∞–ø—Ä–æ—Å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–∞–Ω–∞–ª
				callbackQueries <- models.CallbackQuery{
					ID:          update.CallbackQuery.ID,
					UserID:      update.CallbackQuery.From.ID,
					UserName:    userName,
					UserLogin:   update.CallbackQuery.From.UserName,
					MessageID:   strconv.Itoa(update.CallbackQuery.Message.MessageID),
					ChatID:      strconv.FormatInt(update.CallbackQuery.Message.Chat.ID, 10),
					Data:        update.CallbackQuery.Data,
					MessageText: update.CallbackQuery.Message.Text,
				}

				if t.logger != nil {
					t.logger.Debug("–ø–æ–ª—É—á–µ–Ω callback",
						zap.String("callback_id", update.CallbackQuery.ID),
						zap.Int64("user_id", update.CallbackQuery.From.ID),
						zap.String("data", update.CallbackQuery.Data),
					)
				}

				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ —É –∫–Ω–æ–ø–∫–∏
				callbackCfg := tgbotapi.NewCallback(update.CallbackQuery.ID, "")
				t.bot.Send(callbackCfg)
			}
		}
	}()

	return userMessages, callbackQueries, nil
}
