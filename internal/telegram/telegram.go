package telegram

import (
	"astro-sarafan/internal/models"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"log"
	"strconv"
	"strings"
	"time"
)

type TelegramClient struct {
	bot *tgbotapi.BotAPI
}

func NewTelegramClient(token string) *TelegramClient {
	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		log.Printf("error creating telegram client: %v", err)
	}

	return &TelegramClient{
		bot: bot,
	}
}

func (t *TelegramClient) SendMessage(chatID int64, text string) error {
	msg := tgbotapi.NewMessage(chatID, text)
	_, err := t.bot.Send(msg)
	return err
}

func (t *TelegramClient) SendMarkdownMessage(chatID int64, text string) error {
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"
	msg.DisableWebPagePreview = false // –≤–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä URL, —á—Ç–æ–±—ã —Å—Å—ã–ª–∫–∏ —Ä–∞–±–æ—Ç–∞–ª–∏

	_, err := t.bot.Send(msg)
	return err
}

func (t *TelegramClient) SendMarkdownMessageAndGetID(chatID int64, text string) (string, error) {
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"
	msg.DisableWebPagePreview = false // –≤–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä URL, —á—Ç–æ–±—ã —Å—Å—ã–ª–∫–∏ —Ä–∞–±–æ—Ç–∞–ª–∏

	sentMsg, err := t.bot.Send(msg)
	if err != nil {
		return "", err
	}

	return strconv.Itoa(sentMsg.MessageID), nil
}

func (t *TelegramClient) SendMessageWithKeyboard(chatID int64, text string, keyboard tgbotapi.ReplyKeyboardMarkup) error {
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = keyboard
	_, err := t.bot.Send(msg)
	return err
}

func (t *TelegramClient) SendMessageWithInlineKeyboard(chatID int64, text string, keyboard tgbotapi.InlineKeyboardMarkup) error {
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = keyboard
	_, err := t.bot.Send(msg)
	return err
}

func (t *TelegramClient) UpdateMessageReplyMarkup(chatID int64, messageID string, keyboard tgbotapi.InlineKeyboardMarkup) error {
	msgID, err := strconv.Atoi(messageID)
	if err != nil {
		return fmt.Errorf("invalid message ID: %v", err)
	}

	editMsg := tgbotapi.NewEditMessageReplyMarkup(chatID, msgID, keyboard)
	_, err = t.bot.Send(editMsg)
	return err
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª
func (t *TelegramClient) SendMessageToChannel(channelID string, text string) error {
	// –ï—Å–ª–∏ channelID –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç "-100" –≤ –Ω–∞—á–∞–ª–µ, –¥–æ–±–∞–≤–∏–º
	if !strings.HasPrefix(channelID, "-100") {
		channelID = "-100" + channelID
	}

	chatID, err := strconv.ParseInt(channelID, 10, 64)
	if err != nil {
		return fmt.Errorf("invalid channel ID: %v", err)
	}

	msg := tgbotapi.NewMessage(chatID, text)
	_, err = t.bot.Send(msg)
	return err
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ –≤ –∫–∞–Ω–∞–ª –∞—Å—Ç—Ä–æ–ª–æ–≥–æ–≤
func (t *TelegramClient) SendOrderToAstrologers(channelID string, order models.Order) (string, error) {
	// –ï—Å–ª–∏ channelID –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç "-100" –≤ –Ω–∞—á–∞–ª–µ, –¥–æ–±–∞–≤–∏–º
	if !strings.HasPrefix(channelID, "-100") {
		channelID = "-100" + channelID
	}

	chatID, err := strconv.ParseInt(channelID, 10, 64)
	if err != nil {
		return "", fmt.Errorf("invalid channel ID: %v", err)
	}

	// –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞—Å—Ç—Ä–æ–ª–æ–≥–æ–≤
	text := fmt.Sprintf(
		"üåü *–ù–û–í–´–ô –ó–ê–ö–ê–ó –ù–ê –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Æ* üåü\n\n"+
			"*ID –∑–∞–∫–∞–∑–∞:* `%s`\n"+
			"*–ö–ª–∏–µ–Ω—Ç:* %s\n"+
			"*Username:* @%s\n"+
			"*–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞:* %s\n\n"+
			"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–∑—è—Ç—å –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—Ç—É.",
		order.ID,
		order.ClientName,
		order.ClientUser,
		order.CreatedAt.Format("02.01.2006 15:04"),
	)

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É"
	takeOrderButton := tgbotapi.NewInlineKeyboardButtonData("üîÆ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", "take_order:"+order.ID)
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(takeOrderButton),
	)

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ ID
	sentMsg, err := t.bot.Send(msg)
	if err != nil {
		return "", err
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	return strconv.Itoa(sentMsg.MessageID), nil
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–≥–¥–∞ –∑–∞–∫–∞–∑ –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É)
func (t *TelegramClient) UpdateOrderMessage(channelID string, messageID string, text string, keyboard tgbotapi.InlineKeyboardMarkup) error {
	// –ï—Å–ª–∏ channelID –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç "-100" –≤ –Ω–∞—á–∞–ª–µ, –¥–æ–±–∞–≤–∏–º
	if !strings.HasPrefix(channelID, "-100") {
		channelID = "-100" + channelID
	}

	chatID, err := strconv.ParseInt(channelID, 10, 64)
	if err != nil {
		return fmt.Errorf("invalid channel ID: %v", err)
	}

	msgID, err := strconv.Atoi(messageID)
	if err != nil {
		return fmt.Errorf("invalid message ID: %v", err)
	}

	editMsg := tgbotapi.NewEditMessageText(chatID, msgID, text)
	editMsg.ParseMode = "Markdown"
	editMsg.ReplyMarkup = &keyboard

	_, err = t.bot.Send(editMsg)
	return err
}

// –ï–¥–∏–Ω—ã–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
func (t *TelegramClient) StartBot() (chan models.User, chan models.CallbackQuery, error) {
	// –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º Long Polling
	_, err := t.bot.Request(tgbotapi.DeleteWebhookConfig{})
	if err != nil {
		return nil, nil, fmt.Errorf("failed to delete webhook: %v", err)
	}

	// –ü–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	time.Sleep(1 * time.Second)

	// –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª—ã –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
	userMessages := make(chan models.User)
	callbackQueries := make(chan models.CallbackQuery)

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	// –í–∞–∂–Ω–æ! –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –≤—ã–∑–æ–≤ GetUpdatesChan
	updates := t.bot.GetUpdatesChan(u)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
	go func() {
		for update := range updates {
			// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
			if update.Message != nil {
				// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
				username := update.Message.From.UserName
				fullName := update.Message.From.FirstName
				if update.Message.From.LastName != "" {
					fullName += " " + update.Message.From.LastName
				}

				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
				userMessages <- models.User{
					ChatID:   update.Message.Chat.ID,
					Text:     update.Message.Text,
					Username: username,
					FullName: fullName,
				}
			}

			// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏)
			if update.CallbackQuery != nil {
				userName := update.CallbackQuery.From.FirstName
				if update.CallbackQuery.From.LastName != "" {
					userName += " " + update.CallbackQuery.From.LastName
				}

				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º callback-–∑–∞–ø—Ä–æ—Å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–∞–Ω–∞–ª
				callbackQueries <- models.CallbackQuery{
					ID:          update.CallbackQuery.ID,
					UserID:      update.CallbackQuery.From.ID,
					UserName:    userName,
					UserLogin:   update.CallbackQuery.From.UserName,
					MessageID:   strconv.Itoa(update.CallbackQuery.Message.MessageID),
					ChatID:      strconv.FormatInt(update.CallbackQuery.Message.Chat.ID, 10),
					Data:        update.CallbackQuery.Data,
					MessageText: update.CallbackQuery.Message.Text,
				}

				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ —É –∫–Ω–æ–ø–∫–∏
				callbackCfg := tgbotapi.NewCallback(update.CallbackQuery.ID, "")
				t.bot.Send(callbackCfg)
			}
		}
	}()

	return userMessages, callbackQueries, nil
}

// –≠—Ç–∏ –º–µ—Ç–æ–¥—ã —Ç–µ–ø–µ—Ä—å —É—Å—Ç–∞—Ä–µ–ª–∏, –Ω–æ –º—ã –æ—Å—Ç–∞–≤–ª—è–µ–º –∏—Ö –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
// –û–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–¥–∞–ª–µ–Ω—ã –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º

func (t *TelegramClient) ListenUpdates() (<-chan models.User, error) {
	log.Println("–í–ù–ò–ú–ê–ù–ò–ï: –ú–µ—Ç–æ–¥ ListenUpdates —É—Å—Ç–∞—Ä–µ–ª. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ StartBot –≤–º–µ—Å—Ç–æ –Ω–µ–≥–æ")
	return nil, fmt.Errorf("–º–µ—Ç–æ–¥ —É—Å—Ç–∞—Ä–µ–ª, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ StartBot")
}

func (t *TelegramClient) ListenCallbackQueries() (<-chan models.CallbackQuery, error) {
	log.Println("–í–ù–ò–ú–ê–ù–ò–ï: –ú–µ—Ç–æ–¥ ListenCallbackQueries —É—Å—Ç–∞—Ä–µ–ª. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ StartBot –≤–º–µ—Å—Ç–æ –Ω–µ–≥–æ")
	return nil, fmt.Errorf("–º–µ—Ç–æ–¥ —É—Å—Ç–∞—Ä–µ–ª, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ StartBot")
}
